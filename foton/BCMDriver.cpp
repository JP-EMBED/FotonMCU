/*
 * BCMDriver.cpp
 *
 *  Created on: Feb 23, 2015
 *      Author: Christopher
 */
#include "BCMDriver.h"

#include "DisplayDriver.h"
#include "FreeRTOS.h"
#include "task.h"
static bool BCM_STORAGE_ARRAY[PIN_COUNT][8];
static unsigned short BCM_SLEEP_COUNTS[]={0,0,0,0,10,26,58,122};

GPIOPin * RED0_PTR = 0;
GPIOPin * GREEN0_PTR = 0;
GPIOPin * BLUE0_PTR = 0;

GPIOPin * RED1_PTR = 0;
GPIOPin * GREEN1_PTR = 0;
GPIOPin * BLUE1_PTR = 0;



// BCM FreeRTOS Task
void BCMDriverTask(void *)
{
	unsigned short CURRENT_BIT;
	for(;;)
	{

		int CURRENT_PIXEL=0;
		int CURRENT_ROW=0;
		while(1)
		{
			for (CURRENT_ROW=0; CURRENT_ROW<16;CURRENT_ROW++)
			{
				for (CURRENT_PIXEL=0; CURRENT_PIXEL<32; CURRENT_PIXEL++)
				{
					//SETP0( (*driver).P0_NUM,  CURRENT_ROW,  CURRENT_PIXEL);
					//SETP1( (*driver).P1_NUM,  CURRENT_ROW,  CURRENT_PIXEL);
					while(CURRENT_BIT < 8)
					{
						RED0_PTR->mIsON = BCM_STORAGE_ARRAY[0][CURRENT_BIT];
						GREEN0_PTR->mIsON = BCM_STORAGE_ARRAY[1][CURRENT_BIT];
						BLUE0_PTR->mIsON = BCM_STORAGE_ARRAY[2][CURRENT_BIT];
						RED1_PTR->mIsON = BCM_STORAGE_ARRAY[3][CURRENT_BIT];
						GREEN1_PTR->mIsON = BCM_STORAGE_ARRAY[4][CURRENT_BIT];
						BLUE1_PTR->mIsON = BCM_STORAGE_ARRAY[5][CURRENT_BIT];
						SETBLANK();
						//SETADDR((*driver).addr[CURRENT_ROW]);
						SETLATCH();
						/* CLOCK is will now just be generated by a hardware pwm pin*/
						CLRBLANK();
						if(CURRENT_BIT > 3)
							vTaskDelay(BCM_SLEEP_COUNTS[CURRENT_BIT]);
						++CURRENT_BIT;
					}
				}
			}
			vTaskDelay(3.5/portTICK_PERIOD_MS);
		}
	}

}
